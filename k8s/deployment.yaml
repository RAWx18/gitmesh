# Kubernetes Deployment for Cosmos Web Chat Integration

apiVersion: apps/v1
kind: Deployment
metadata:
  name: cosmos-chat-app
  namespace: cosmos-chat
  labels:
    app: gitmesh-cosmos-chat
    version: "1.0.0"
    component: cosmos-chat
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: gitmesh-cosmos-chat
  template:
    metadata:
      labels:
        app: gitmesh-cosmos-chat
        version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/api/v1/cosmos/health/metrics"
    spec:
      serviceAccountName: cosmos-chat-service-account
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        runAsNonRoot: true
      containers:
      - name: cosmos-chat
        image: gitmesh-cosmos-chat:1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        # Load configuration from ConfigMap
        - name: APP_NAME
          valueFrom:
            configMapKeyRef:
              name: cosmos-chat-config
              key: APP_NAME
        - name: APP_VERSION
          valueFrom:
            configMapKeyRef:
              name: cosmos-chat-config
              key: APP_VERSION
        - name: DEPLOYMENT_ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: cosmos-chat-config
              key: DEPLOYMENT_ENVIRONMENT
        - name: DEPLOYMENT_TYPE
          valueFrom:
            configMapKeyRef:
              name: cosmos-chat-config
              key: DEPLOYMENT_TYPE
        - name: COSMOS_CHAT_ENABLED
          valueFrom:
            configMapKeyRef:
              name: cosmos-chat-config
              key: COSMOS_CHAT_ENABLED
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: cosmos-chat-config
              key: LOG_LEVEL
        - name: LOG_FORMAT
          valueFrom:
            configMapKeyRef:
              name: cosmos-chat-config
              key: LOG_FORMAT
        
        # Load secrets
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: cosmos-chat-secrets
              key: DATABASE_URL
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: cosmos-chat-secrets
              key: REDIS_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: cosmos-chat-secrets
              key: JWT_SECRET
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: cosmos-chat-secrets
              key: SECRET_KEY
        - name: GITHUB_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: cosmos-chat-secrets
              key: GITHUB_CLIENT_ID
        - name: GITHUB_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: cosmos-chat-secrets
              key: GITHUB_CLIENT_SECRET
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: cosmos-chat-secrets
              key: GEMINI_API_KEY
        
        # Resource limits and requests
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
        
        # Liveness probe
        livenessProbe:
          httpGet:
            path: /api/v1/cosmos/health/liveness
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        # Readiness probe
        readinessProbe:
          httpGet:
            path: /api/v1/cosmos/health/readiness
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        # Startup probe
        startupProbe:
          httpGet:
            path: /api/v1/cosmos/health/liveness
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        
        # Security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        
        # Volume mounts
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: logs-volume
          mountPath: /app/logs
        - name: cache-volume
          mountPath: /app/cache
      
      # Volumes
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: logs-volume
        emptyDir: {}
      - name: cache-volume
        emptyDir: {}
      
      # Node selection and affinity
      nodeSelector:
        kubernetes.io/os: linux
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - gitmesh-cosmos-chat
              topologyKey: kubernetes.io/hostname
      
      # Tolerations
      tolerations:
      - key: "cosmos-chat"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"